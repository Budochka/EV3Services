using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace EV3UIWF
{
    public partial class FrmMain : Form
    {
        private readonly Worker _worker;
        private readonly List<Plugin> _listPlgugins = new();
        private NLog.Logger _logs;

        public FrmMain(NLog.Logger log, Config cfg)
        {
            InitializeComponent();

            _logs = log;

            _worker = new Worker(log, cfg);
            _worker.Initialize();
            _worker.Start();

            _worker.Notify += (key, bytes) => ProcessMessage(key, bytes);
            
            ScanPlugins(cfg.PluginsFolder);
        }

        private void FillPluginsMenu()
        {
            foreach (var plugin in _listPlgugins)
            {
                var subMenuItem = new ToolStripMenuItem(plugin.Name, null, OnPluginClick);
                plugin.Data = subMenuItem;
                pluginsToolStripMenuItem.DropDownItems.Add(subMenuItem);
            }
        }

        private void OnPluginClick(object sender, EventArgs e)
        {
            var item = _listPlgugins.Find(i => i.Data == sender);
            if (item != null)
            {
                ExecutePlugin(item);
            }
        }

        private void ExecutePlugin(Plugin item)
        {
            var start = new ProcessStartInfo
            {
                FileName = "python.exe",
                Arguments = $"\"{item.FullFileName}\"",
                UseShellExecute = false, // Do not use OS shell
                CreateNoWindow = true, // We don't need new window
                RedirectStandardOutput = true, // Any output, generated by application will be redirected back
                RedirectStandardError = true // Any error in standard output will be redirected back (for example exceptions)
            };

            using var process = Process.Start(start);
            if (process == null) return;

            using var reader = process.StandardOutput;
            var stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
            var result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
        }

        private void ScanPlugins(string folder)
        {
            IEnumerable<string> files;
            try
            {
                files = Directory.EnumerateFiles(folder, "*.py");
            }
            catch (DirectoryNotFoundException e)
            {
                _logs.Error(e, "No plugins directory found");
                return;
            }
            foreach (var f in files)
            {
                _listPlgugins.Add(new Plugin(name: Path.GetFileNameWithoutExtension(f), fullFileName: f));
            }
        }

        private void frmMain_FormClosed(object sender, FormClosedEventArgs e)
        {
            _worker.Stop();
        }

        private void ProcessMessage(string key, byte[] data)
        {
            if (key == "images.general")
            {
                imgCameraView.Image = Image.FromStream(new MemoryStream(data));
            }
        }

        private void btnSayIt_Click(object sender, System.EventArgs e)
        {
            var text = textToSay.Text.ToCharArray();
            var data = new byte[text.Length * sizeof(char)];
            Buffer.BlockCopy(text, 0, data, 0, text.Length * sizeof(char));

            _worker.Publish("voice.text", data);
            textToSay.Clear();
        }

        private void btnForward_Click(object sender, EventArgs e)
        {
            var mc = new MoveCommand(Convert.ToInt32(txtDistance.Text), Convert.ToInt32(txtTorqueMove.Text));
            _worker.Publish("movement.distance", mc.ToByte());
        }

        private void btnBackward_Click(object sender, EventArgs e)
        {
            var mc = new MoveCommand(-Convert.ToInt32(txtDistance.Text), Convert.ToInt32(txtTorqueMove.Text));
            _worker.Publish("movement.distance", mc.ToByte());
        }

        private void btnLeft_Click(object sender, EventArgs e)
        {
            var tc = new TurnCommand(Convert.ToInt32(txtDegree.Text), -Convert.ToInt32(txtTorqueRotate.Text));
            _worker.Publish("movement.turn", tc.ToByte());
        }

        private void btnRight_Click(object sender, EventArgs e)
        {
            var tc = new TurnCommand(Convert.ToInt32(txtDegree.Text), Convert.ToInt32(txtTorqueRotate.Text));
            _worker.Publish("movement.turn", tc.ToByte());
        }

        private void FrmMain_Load(object sender, EventArgs e)
        {
            FillPluginsMenu();
        }

        private void btnHeadLeft_Click(object sender, EventArgs e)
        {
            var htc = new HeadTurnCommand(Convert.ToInt32(txtDegreeHead.Text), Convert.ToInt32(txtTorqueHead.Text));
            _worker.Publish("movement.headturn", htc.ToByte());
        }

        private void btnHeadRight_Click(object sender, EventArgs e)
        {
            var htc = new HeadTurnCommand(Convert.ToInt32(txtDegreeHead.Text), -Convert.ToInt32(txtTorqueHead.Text));
            _worker.Publish("movement.headturn", htc.ToByte());
        }
    }
}
